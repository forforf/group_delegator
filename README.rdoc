= group_delegator

GroupDelegator provides a way to wrap a collection of objects and send method calls to the entire collection.
* Simple case: Bind a collection of existing objects to a common wrapper that will proxy the method calls to each object
  Example:
    require 'group_delegator'

    proxy_numbers = ["1", "2", "3"]
    proxy_all = SimpleGroupDelegator.new(proxy_numbers)
    proxy_data = proxy_all.to_i
      #=> {"1"=>1, "2"=>2, "3"=>3}

    #or if you just wanted the integers
    proxy_integers = proxy_all.to_i
      #=> [1, 2, 3]
    puts "proxied to_i: #{proxy_integers.values.inspect}"

* Why not just use Array#map to do the same transformation? i.e.:
    map_numbers =["1", "2", "3"]
    mapped_integers = map_numbers.map{|t| t.to_i}
    puts "mapped to_i: #{mapped_integers.inspect}"

* Let's compare
    #proxy by group_delegator
    proxy_numbers = ["1", "2", "3"]
    proxy_all = SimpleGroupDelegator.new(proxy_numbers)
    proxy_integers = proxy_all.to_i
    #lets add the string "times" to each number
    proxy_string = proxy_all<< " times"
    #then make it uppercase
    proxy_upcase = proxy_all.upcase

    #tranform collection by Array#map
    map_numbers =["1", "2", "3"]
    map_integers = map_numbers.map{|t| t.to_i}
    #lets add the string "times" to each number
    map_string = map_numbers.map{|t| t << " times"}
    #then make it uppercase
    map_upcase = map_string.map{|t| t.upcase}

    #proxy output
    puts "Proxy: #{proxy_integers.values.inspect}"
    puts "Proxy: #{proxy_string.values.inspect}"
    puts "Proxy: #{proxy_upcase.values.inspect}"
    #=> Proxy: [1, 2, 3]
    #=> Proxy: ["1 times", "2 times", "3 times"]
    #=> Proxy: ["1 TIMES", "2 TIMES", "3 TIMES"]

    #map output
    puts "Map: #{map_integers.inspect}"
    puts "Map: #{map_string.inspect}"
    puts "Map: #{map_upcase.inspect}"
    #=> Map: [1, 2, 3]
    #=> Map: ["1 times", "2 times", "3 times"]
    #=> Map: ["1 TIMES", "2 TIMES", "3 TIMES"]
 

= TODO
* add new Delgator -> GroupMetaDelegator that passes *all* methods through to sources (including methods from Object and Module). This requires remapping existing default methods to an alias (probably _gd_[method name]

= Examples on Use (until I can get a full fledged tutorial written up)
  

== Contributing to group_delegator
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 David Martin See LICENSE.txt for
further details.

